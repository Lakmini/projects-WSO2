<%
/*
 ~ Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 ~
 ~ Licensed under the Apache License, Version 2.0 (the "License");
 ~ you may not use this file except in compliance with the License.
 ~ You may obtain a copy of the License at
 ~
 ~      http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~ Unless required by applicable law or agreed to in writing, software
 ~ distributed under the License is distributed on an "AS IS" BASIS,
 ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 ~ See the License for the specific language governing permissions and
 ~ limitations under the License.
 */
//make db connection through UnifiedDashboards data source
var db = new Database("UnifiedDashboards");
//get product name from request parameters
var name = request.getParameter("name");
//get start date from request parameters
var startDate = request.getParameter("start_date");
//get end date from request parameters
var endDate = request.getParameter("end_date");

function getData() {
//selet repository details for the given product.
//Example for the product APIM repos are product-apim,analytics-apim
    var githubMappingQuery = "SELECT * FROM GitHubMappingTable WHERE Product='" + name + "';";
    var gitHubMappingData = db.query(githubMappingQuery);
    //variable to store repository name inside the for loop
    var repoName;
    //array to store sha value,commitdate,committerID,committer name, link for the profile picture
    var commitsPerProduct = [];
    //go through each repository of the product
    for (var i in gitHubMappingData) {
        //assign repository name
        repoName = (gitHubMappingData[i].Repo).toString();
        //select commit details of the products. sha,commitDate,name of the repository
        var commitDataQuery = "SELECT DISTINCT sha,commitDate,repo FROM githubCommit " +
                "where repo='" + repoName + "' AND date(commitDate)>'" + startDate + "' AND date(commitDate)<'" + endDate + "';";
        var commitData = db.query(commitDataQuery);
        //if commits are available for the selected repository then they are pushed in to commitsPerProduct array
        if (commitData.length != 0) {

            for (var i in commitData) {
                commitsPerProduct.push({
                    //id of the commit
                    "sha": commitData[i].sha,
                    //date of the commit
                    "commitDate": commitData[i].commitDate
                });
            }
        }

    }
    print(commitsPerProduct);
    return commitsPerProduct;

}
getData();
db.close();

%>
