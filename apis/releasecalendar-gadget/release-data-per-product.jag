<%
/*
 ~ Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 ~
 ~ Licensed under the Apache License, Version 2.0 (the "License");
 ~ you may not use this file except in compliance with the License.
 ~ You may obtain a copy of the License at
 ~
 ~      http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~ Unless required by applicable law or agreed to in writing, software
 ~ distributed under the License is distributed on an "AS IS" BASIS,
 ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 ~ See the License for the specific language governing permissions and
 ~ limitations under the License.
 */
include("insertdata.jag");
//make the db connection through the UniDash_DS datasource
var db = new Database("UnifiedDashboards");
var redmine_product_name =request.getParameter("product_name");

//calculate the date which is 6 months back from current date
var begin = new Date();
begin.setDate(begin.getDate() - 365);
//calculate the date which is 12 months ahead  from current date
var end = new Date();
end.setDate(end.getDate() + 365);
//assign the default value exists in the db for the due_date attribute
var DEFAULT_DUE_DATE = "<due_date/>";
//assign the status of the product as "open"
var DEFAULT_STATUS = "open";
//convert begin date of the time period in to yyyy-dd-mm format
var MIN_DUE_DATE = [begin.getFullYear(), ('0' + (begin.getMonth() + 1)).slice(-2), ('0' + begin.getDate()).slice(-2)].join('-');
//convert end date of the time period in to yyyy-dd-mm format
var MAX_DUE_DATE = [end.getFullYear(), ('0' + (end.getMonth() + 1)).slice(-2), ('0' + end.getDate()).slice(-2)].join('-');
/**
 *
 */
function putDbRecords() {
   var query_product_data="SELECT Project_id,Project_Name,MAX(_timestamp) FROM RM_PROJECT where Project_Name='"+redmine_product_name+"'";
    var product_data=db.query(query_product_data);
     /**
     * select version_id with maximum timestamp from today results which are in selected time range and the
     * status="open" and due_date!=<due_date/> and the version should be GA-versions
     */
 

 // get the product details with maximum time stamp
 var query_latesttimestamp_data="select distinct t.version_id,t.project_id,t.version_name,t.due_date,t.status,t._timestamp "+
 "from (select version_id,MAX(_timestamp) as x from RM_VERSION where date(_timestamp)=CURDATE() and project_id="+product_data[0].Project_id+" group by version_id) as m "+
 "inner join RM_VERSION as t on t.version_id=m.version_id and t._timestamp=m.x and t.status='"+DEFAULT_STATUS+"' and "+
 "t.due_date!='"+DEFAULT_DUE_DATE+"' and t.due_date>'"+MIN_DUE_DATE+"' and t.due_date<'"+MAX_DUE_DATE+"';";
 var result=db.query(query_latesttimestamp_data);

 //if there is no data with current date then get the latest timestamp data
 if(result.length==0)
 {
  query_latesttimestamp_data="select distinct t.version_id,t.project_id,t.version_name,t.due_date,t.status,t._timestamp "+
 "from (select version_id,MAX(_timestamp) as x from RM_VERSION where  project_id="+product_data[0].Project_id+" group by version_id) as m "+
 "inner join RM_VERSION as t on t.version_id=m.version_id and t._timestamp=m.x and t.status='"+DEFAULT_STATUS+"' and "+
 "t.due_date!='"+DEFAULT_DUE_DATE+"' and t.due_date>'"+MIN_DUE_DATE+"' and t.due_date<'"+MAX_DUE_DATE+"';";;
  result=db.query(query_latesttimestamp_data);

 }
 
 /**
  * compare  old updated due_date details of the product and
  * put in to a table if there is any new change of due_date
  */
 
 createJSONArray(result,product_data[0].Project_id,redmine_product_name);

   
}
/**
 * @param result- product details of the latest time stamp
 */
function createJSONArray(result,project_id,redmine_product_name) {
 //select the updates of the due dates from RM_CHANGED_RECORD table
 var query_changed_record_data="SELECT DISTINCT version_id,old_due_date "+
 "FROM  RM_CHANGED_RECORD WHERE Project_id="+project_id+" ORDER  BY  _timestamp;";
 var updates = db.query(query_changed_record_data);
 var records = [];
 //check for any updated due_dates of the products
 if (updates != null) {
  //go through the each product and create old_due_date[] for each product.
  for (var i in result) {
   var old_due_dates = [];
   var k = 0;
   for (var j in updates) {
    if (updates[j].version_id === result[i].version_id) {
     old_due_dates[k++] = updates[j].old_due_date;

    }
   }
   //store the following product details in records array
   records.push({
    "Project_Name":redmine_product_name,
    "version_id": result[i].version_id,
    "version_name": result[i].version_name,
    "due_date": result[i].due_date,
    "old_due_dates": old_due_dates,
    "status": result[i].status

   });
  }
 }
 else {
  /*if there is no any updated due_date details then assign empty
   array for old_due_date field */
  for (var i in result) {
   records.push({
    "Project_Name": redmine_product_name,
    "version_id": result[i].version_id,
    "version_name": result[i].version_name,
    "due_date": result[i].due_date,
    "old_due_date": old_due_dates,
    "status": result[i].status

   });
  }
 }

 print(records);
 return records;

}
putDbRecords();
db.close();
%>


